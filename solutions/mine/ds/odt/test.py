#!/usr/bin/python3
# Generated by GPT

import argparse
import subprocess
import time
import statistics
import sys

def measure_execution_time(command):
    start_time = time.perf_counter()
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    end_time = time.perf_counter()
    return end_time - start_time, result.stdout

def main():
    parser = argparse.ArgumentParser(description="Compare execution time of two programs.")
    parser.add_argument("A", help="Executable file A")
    parser.add_argument("B", help="Executable file B")
    parser.add_argument("-C", default="gen.py", help="Input generator script (default: gen.py)")
    parser.add_argument("-T", type=int, default=20, help="Number of iterations (default: 20)")
    
    args = parser.parse_args()
    
    times_a = []
    times_b = []
    
    for _ in range(args.T):
        # Generate input file
        subprocess.run(f"python {args.C} > a.in", shell=True)
        
        # Measure time and capture output for program A
        time_a, output_a = measure_execution_time(f"./{args.A} < a.in")
        times_a.append(time_a)
        
        # Measure time and capture output for program B
        time_b, output_b = measure_execution_time(f"./{args.B} < a.in")
        times_b.append(time_b)
        
        # Compare outputs
        if output_a != output_b:
            print("Error: Outputs of A and B are different.")
            sys.exit(1)
    
    # Calculate statistics for time_a
    mean_a = statistics.mean(times_a)
    variance_a = statistics.variance(times_a) if args.T > 1 else 0
    stdev_a = statistics.stdev(times_a) if args.T > 1 else 0
    range_a = max(times_a) - min(times_a)
    median_a = statistics.median(times_a)
    
    # Calculate statistics for time_b
    mean_b = statistics.mean(times_b)
    variance_b = statistics.variance(times_b) if args.T > 1 else 0
    stdev_b = statistics.stdev(times_b) if args.T > 1 else 0
    range_b = max(times_b) - min(times_b)
    median_b = statistics.median(times_b)
    
    print(f"Results for program A:")
    print(f"Mean: {mean_a:.6f}, Variance: {variance_a:.6f}, Std Dev: {stdev_a:.6f}, Range: {range_a:.6f}, Median: {median_a:.6f}")
    
    print(f"Results for program B:")
    print(f"Mean: {mean_b:.6f}, Variance: {variance_b:.6f}, Std Dev: {stdev_b:.6f}, Range: {range_b:.6f}, Median: {median_b:.6f}")

if __name__ == "__main__":
    main()